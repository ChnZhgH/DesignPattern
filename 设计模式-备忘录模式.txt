1.备忘录模式：
	A.在不破坏封装性的前提下，捕获一个状态的内部状态，并在该对象之外保存这个
		状态。这样以后就可将该状态恢复到原先保存到状态。
	B.比如我想保存一个对象的当前信息(因为可能会执行撤销操作)，有3种方法：
		a.在客户端再new一个对象出来，然后set属性，要撤销的时候再一次赋值回去
			这里有个问题，这个对象细节信息都暴露给客户端了，
			客户端知道的太多的，耦合自然就强了，所以不可取
		b.利用之前学过原型模式，clone一个出来呗，记得要深克隆哦
			不然可能有部分引用属性无法恢复到备份状态
			但是有时候我们常常只需要备份一部分信息，不需要都clone
		c.用备忘录模式，把该封装都封装好，不对客户端暴露细节信息
			首先创建一个状态存储类，把要存储的对象信息写到这个类里边
			然后在原对象中添加存储和恢复方法，把要存到信息存到存储类里边
			      * 这样客户端只需要调用原对象的存储方法，然后得到存储类对象
				需要恢复的时候，给恢复方法传入存储类对象
				但是我连存储类都不想客户端接触
			接着创建一个管理类，它持有存储类引用，提供get/set方法
			这样只需要把保存操得到的存储类对象直接set给管理类的引用即可！
2.备忘录模式的理解：
	A.举个例子来理解：
		比如玩游戏要保存进度和恢复进度，那么我们需要给角色信息进行备份，
		然后当要读取存档的时候去读取这个备份，不过我们游戏中，
		一般会把这个存储类持久化到硬盘，不然太占内存了
		但是如果是文本框编辑，里边的撤销，那就只能占着内存先了
	B.备忘录模式需要注意的几个点：
		首先如果对象很大，备忘录模式是很占内存的
		其次我们现在写的备忘录模式只能存储一个快照
		如果想要存储多个快照了话，那管理类中需要持有存储类对象数组才行了				
3.备忘录模式的实现：
	比如只对游戏中人物所持金币进行备份
	A.首先创建一个存储类：
		class Memento{
			private int money;
			public Memento(int money){ this.money = money; }
			public void setMoney(int money){
				this.money = money;
			}
			public int getMoney(){ return this.money; }
		}
	B.然后把人物类加上存储和恢复方法：
		class Role{
			private int rank;
			private int money;
			private String name;
			public Role(int rank, int money, String name){
				this.rank = rank;
				this.money = money;
				this.name = name;
			}
			{get/set function}
			{...other actions function}
			public Memento saveState(){
				return ( new Memento(this.money) );
			}
			public void recoveryState(Memento m){
				this.money = m.getMoney();
			}
		}
	C.创建管理类来
		class Caretaker{
			private Memento memento;
			public void setMemento(Memento m){ this.memento = m;}
			public Memento getMemento(){ return this.memento; }
		}
	D.客户端：
		class Demo{
			public static void main(String[] args ){
				Role r = new Role(1,10000,“小豪”);
				Caretaker c = new Caretaker();
				c.setMemento(r.saveState());
				//....      一堆操作
				r.recoveryState(c.getMemento());
			}
		}