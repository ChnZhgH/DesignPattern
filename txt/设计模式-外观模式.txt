1.外观模式：
	A.为子系统中的一组接口提供一个一致的界面，此模型定义了一个高层接口，
	    这个接口使得这一子系统更容易使用。
	B.说白了就是简化客户端，定义一个外观类，把接口/类ABC整合了
	    省的用户自己分别去调用ABC，直接调用外观类，完成ABC组合操作
2.使用场景：
	A.在设计初期，应该有意识的将不同的两个层分离，比如表示层，业务逻辑层和数据访问层
		各层之间建立外观模式，可以为复杂的子系统提供一个简单的接口，使得耦合性降低
	B.在开发阶段，子系统会越来越复杂，这会给外部调用它们的用户带来使用上的困难
		比如新手程序员，所以让有经验的开发者设计一个简单的接口，
		可以减少它们之间的依赖，而且使得上手更容易
	C.在维护一个遗留的大型系统，可能这个系统已经非常难以维护和扩展了，但因为它包含
		非常重要的功能，新的需求开发必须要依赖于它。此时用外观模也是非常合适的。
		你可以为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较
		清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。
