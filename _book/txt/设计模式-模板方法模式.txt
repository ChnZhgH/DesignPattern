1.模板方法模式：
	A.定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
	   模版方法使得子类可以不改变一个算法结构，即可重新定义该算法的某些特定步骤。
	B.模版方法模式实际上就是最合理的去使用继承，然后客户端使用多态，提高复用性
2.模板方法的具体例子：试卷模版，学生按照老师给出的题目，抄题目并答题
	class TestPaper{
		public void TestQuestion1(){
			System.out.println(“题目一：...”);
			System.out.println( “答案：” + Answer1() );
			//不专业的写法还有一种：
			//	就是不写上面这句，而是子类写一个和父类的同名方法，
			//	然后在子类方法中，调用父类方法，然后再补充显示答案为x
		}
		protected abstract String Answer1(){}
		
		public void TestQuestion2(){...}
		protected abstract String Answer2(){}
	}
		
	class TestPaperA extends TestPaper{
		@override
		protected String Answer1(){ return “a”; }
		@override
		protected String Answer2(){ return “c”; }
	}
	
	class TestPaperB extends TestPaper{
		@override
		protected String Answer1(){ return “b”; }
		@override
		protected String Answer2(){ return “c”; }
	}
		
	class Demo {
		public static void main(String[] args){
			TestPaper tp1 = new TestPaperA();  // 使用多态
			tp1.TestQuestion1();
			tp1.TestQuestion2();

			TestPaper tp2 = new TestPaperB();
			tp2.TestQuestion1();
			tp2.TestQuestion2();

		}
	}