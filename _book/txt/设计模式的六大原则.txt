1.单一原则：一个类只做一件事情

2.开放封闭原则：对扩展开放，对修改关闭
	之所以能够实现开闭原则，是因为有里氏替换作为保障，
	否则怎么能操作父类，然后传入的是新子类呢

3.依赖倒转原则：抽象不应该依赖细节，细节应该依赖抽象
	A.就是要针对接口编程，不要对实现编程
	B.高层模块不应该依赖底层模块，两者都应该依赖抽象
		就是高层模块不应该由底层模块，比如直接依赖某数据库什么的
		如果依赖了，高层的复用性就没有了，比如现在要高层的结构，但是想把数据库换了
		所以无论是高层还低层，都应该依赖于接口编程
	C.例子：电脑主板为高层，显卡，内存，CPU等为低层
		低层是面对接口的，只要插针规格满足，遵循接口规定，内存不同牌子随便换
		高层也是面对接口的，主板换了，不影响低层的使用
	D.但是为什么依赖了接口或抽象类就不怕更改呢？原因是满足了里氏替换原则

4.里氏替换原则：子类型必须能够替换它们的父类型
	A.由于子类型一定可以替换父类型，我的操作是面向接口的，你只要实现或继承这个接口
		一定可以替换我操作的接口对象
	B.如何保证里氏替换：
		比如抽象类鸟，有抽象方法—飞
		那么企鹅属于鸟吗？现实生活中企鹅是属于鸟的，但是企鹅不具有飞的能力
		所以企鹅不能继承鸟，所以编程中，企鹅不属于鸟，因为企鹅无法替换鸟

5.迪米特法则：
	A.如果两个类不必彼此直接通信，那么这两个类就不应当发生直接对相互作用。
		如果其中一个类需要调用另一个类的某一个方法的话，
	    	可以通过第三者去转发这个调用
	B.通过一个例子来理解：
		比如一个公司中，电脑坏了要找人修，要找IT部
		这时候会出现几种不理想情况：
			去找IT部的小李修，去找IT部的小王修
			去找IT部的主管，让主管分配部员修
		a.首先他们中任何一个人都可能在忙
		b.其次，这其实违背了迪米特原则，部门之间的成员不必要直接发生作用
		c.再有，这其实违背了依赖倒转原则，不管是主管还是成员，都应该面向接口编程
			当我电脑坏的时候，去找IT部，而不是去找具体的人
	C.所以迪米特原则强调的是低耦合，这样复用性也将更强

6.合成/聚合复用原则：尽量使用合成/聚合，尽量不要使用类继承
	A.聚合表示一种弱‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；
	B.合成则是一种强‘拥有’关系，体现了严格的部分与整体关系，部分和整体的生命周期一样。
	C.通过一个例子来理解：
		首先我们要清楚，无论是合成还是聚合都不同于继承
		对于大雁，我们写一个大雁对象，并且让大雁对象持有翅膀和爪子的引用
		这种引用我们叫做合成，因为翅膀和爪子和大雁是部分与整体的关系
		同样对于大雁，由于雁群中的大雁不止一只，所以大雁和雁群是聚合关系
	D.合成/聚合复用原则的应用：桥接模式！	
	E.为什么说不用继承呢？
		因为继承当基类发生变化，所有派生类都要
		合成/聚合复用体现具体见设计模式—桥接模式	
